// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packet.proto

#ifndef PROTOBUF_packet_2eproto__INCLUDED
#define PROTOBUF_packet_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Packet {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_packet_2eproto();
void protobuf_AssignDesc_packet_2eproto();
void protobuf_ShutdownFile_packet_2eproto();

class PacketHeader;
class PacketHeader_ConnectedPacket;
class PacketHeader_LoginPacket;

// ===================================================================

class PacketHeader_ConnectedPacket : public ::google::protobuf::Message {
 public:
  PacketHeader_ConnectedPacket();
  virtual ~PacketHeader_ConnectedPacket();

  PacketHeader_ConnectedPacket(const PacketHeader_ConnectedPacket& from);

  inline PacketHeader_ConnectedPacket& operator=(const PacketHeader_ConnectedPacket& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PacketHeader_ConnectedPacket& default_instance();

  void Swap(PacketHeader_ConnectedPacket* other);

  // implements Message ----------------------------------------------

  PacketHeader_ConnectedPacket* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PacketHeader_ConnectedPacket& from);
  void MergeFrom(const PacketHeader_ConnectedPacket& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 connected = 1;
  inline bool has_connected() const;
  inline void clear_connected();
  static const int kConnectedFieldNumber = 1;
  inline ::google::protobuf::int32 connected() const;
  inline void set_connected(::google::protobuf::int32 value);

  // optional string character_list = 2;
  inline bool has_character_list() const;
  inline void clear_character_list();
  static const int kCharacterListFieldNumber = 2;
  inline const ::std::string& character_list() const;
  inline void set_character_list(const ::std::string& value);
  inline void set_character_list(const char* value);
  inline void set_character_list(const char* value, size_t size);
  inline ::std::string* mutable_character_list();
  inline ::std::string* release_character_list();
  inline void set_allocated_character_list(::std::string* character_list);

  // @@protoc_insertion_point(class_scope:Packet.PacketHeader.ConnectedPacket)
 private:
  inline void set_has_connected();
  inline void clear_has_connected();
  inline void set_has_character_list();
  inline void clear_has_character_list();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* character_list_;
  ::google::protobuf::int32 connected_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_packet_2eproto();
  friend void protobuf_AssignDesc_packet_2eproto();
  friend void protobuf_ShutdownFile_packet_2eproto();

  void InitAsDefaultInstance();
  static PacketHeader_ConnectedPacket* default_instance_;
};
// -------------------------------------------------------------------

class PacketHeader_LoginPacket : public ::google::protobuf::Message {
 public:
  PacketHeader_LoginPacket();
  virtual ~PacketHeader_LoginPacket();

  PacketHeader_LoginPacket(const PacketHeader_LoginPacket& from);

  inline PacketHeader_LoginPacket& operator=(const PacketHeader_LoginPacket& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PacketHeader_LoginPacket& default_instance();

  void Swap(PacketHeader_LoginPacket* other);

  // implements Message ----------------------------------------------

  PacketHeader_LoginPacket* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PacketHeader_LoginPacket& from);
  void MergeFrom(const PacketHeader_LoginPacket& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string username = 2;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 2;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // required string password = 3;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 3;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // optional int32 version = 4;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 4;
  inline ::google::protobuf::int32 version() const;
  inline void set_version(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Packet.PacketHeader.LoginPacket)
 private:
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_version();
  inline void clear_has_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* username_;
  ::std::string* password_;
  ::google::protobuf::int32 version_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_packet_2eproto();
  friend void protobuf_AssignDesc_packet_2eproto();
  friend void protobuf_ShutdownFile_packet_2eproto();

  void InitAsDefaultInstance();
  static PacketHeader_LoginPacket* default_instance_;
};
// -------------------------------------------------------------------

class PacketHeader : public ::google::protobuf::Message {
 public:
  PacketHeader();
  virtual ~PacketHeader();

  PacketHeader(const PacketHeader& from);

  inline PacketHeader& operator=(const PacketHeader& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PacketHeader& default_instance();

  void Swap(PacketHeader* other);

  // implements Message ----------------------------------------------

  PacketHeader* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PacketHeader& from);
  void MergeFrom(const PacketHeader& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef PacketHeader_ConnectedPacket ConnectedPacket;
  typedef PacketHeader_LoginPacket LoginPacket;

  // accessors -------------------------------------------------------

  // optional .Packet.PacketHeader.LoginPacket login_packet = 1;
  inline bool has_login_packet() const;
  inline void clear_login_packet();
  static const int kLoginPacketFieldNumber = 1;
  inline const ::Packet::PacketHeader_LoginPacket& login_packet() const;
  inline ::Packet::PacketHeader_LoginPacket* mutable_login_packet();
  inline ::Packet::PacketHeader_LoginPacket* release_login_packet();
  inline void set_allocated_login_packet(::Packet::PacketHeader_LoginPacket* login_packet);

  // optional .Packet.PacketHeader.ConnectedPacket connected_packet = 2;
  inline bool has_connected_packet() const;
  inline void clear_connected_packet();
  static const int kConnectedPacketFieldNumber = 2;
  inline const ::Packet::PacketHeader_ConnectedPacket& connected_packet() const;
  inline ::Packet::PacketHeader_ConnectedPacket* mutable_connected_packet();
  inline ::Packet::PacketHeader_ConnectedPacket* release_connected_packet();
  inline void set_allocated_connected_packet(::Packet::PacketHeader_ConnectedPacket* connected_packet);

  // optional string auth_code = 3;
  inline bool has_auth_code() const;
  inline void clear_auth_code();
  static const int kAuthCodeFieldNumber = 3;
  inline const ::std::string& auth_code() const;
  inline void set_auth_code(const ::std::string& value);
  inline void set_auth_code(const char* value);
  inline void set_auth_code(const char* value, size_t size);
  inline ::std::string* mutable_auth_code();
  inline ::std::string* release_auth_code();
  inline void set_allocated_auth_code(::std::string* auth_code);

  // @@protoc_insertion_point(class_scope:Packet.PacketHeader)
 private:
  inline void set_has_login_packet();
  inline void clear_has_login_packet();
  inline void set_has_connected_packet();
  inline void clear_has_connected_packet();
  inline void set_has_auth_code();
  inline void clear_has_auth_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Packet::PacketHeader_LoginPacket* login_packet_;
  ::Packet::PacketHeader_ConnectedPacket* connected_packet_;
  ::std::string* auth_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_packet_2eproto();
  friend void protobuf_AssignDesc_packet_2eproto();
  friend void protobuf_ShutdownFile_packet_2eproto();

  void InitAsDefaultInstance();
  static PacketHeader* default_instance_;
};
// ===================================================================


// ===================================================================

// PacketHeader_ConnectedPacket

// optional int32 connected = 1;
inline bool PacketHeader_ConnectedPacket::has_connected() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PacketHeader_ConnectedPacket::set_has_connected() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PacketHeader_ConnectedPacket::clear_has_connected() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PacketHeader_ConnectedPacket::clear_connected() {
  connected_ = 0;
  clear_has_connected();
}
inline ::google::protobuf::int32 PacketHeader_ConnectedPacket::connected() const {
  return connected_;
}
inline void PacketHeader_ConnectedPacket::set_connected(::google::protobuf::int32 value) {
  set_has_connected();
  connected_ = value;
}

// optional string character_list = 2;
inline bool PacketHeader_ConnectedPacket::has_character_list() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PacketHeader_ConnectedPacket::set_has_character_list() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PacketHeader_ConnectedPacket::clear_has_character_list() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PacketHeader_ConnectedPacket::clear_character_list() {
  if (character_list_ != &::google::protobuf::internal::kEmptyString) {
    character_list_->clear();
  }
  clear_has_character_list();
}
inline const ::std::string& PacketHeader_ConnectedPacket::character_list() const {
  return *character_list_;
}
inline void PacketHeader_ConnectedPacket::set_character_list(const ::std::string& value) {
  set_has_character_list();
  if (character_list_ == &::google::protobuf::internal::kEmptyString) {
    character_list_ = new ::std::string;
  }
  character_list_->assign(value);
}
inline void PacketHeader_ConnectedPacket::set_character_list(const char* value) {
  set_has_character_list();
  if (character_list_ == &::google::protobuf::internal::kEmptyString) {
    character_list_ = new ::std::string;
  }
  character_list_->assign(value);
}
inline void PacketHeader_ConnectedPacket::set_character_list(const char* value, size_t size) {
  set_has_character_list();
  if (character_list_ == &::google::protobuf::internal::kEmptyString) {
    character_list_ = new ::std::string;
  }
  character_list_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PacketHeader_ConnectedPacket::mutable_character_list() {
  set_has_character_list();
  if (character_list_ == &::google::protobuf::internal::kEmptyString) {
    character_list_ = new ::std::string;
  }
  return character_list_;
}
inline ::std::string* PacketHeader_ConnectedPacket::release_character_list() {
  clear_has_character_list();
  if (character_list_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = character_list_;
    character_list_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PacketHeader_ConnectedPacket::set_allocated_character_list(::std::string* character_list) {
  if (character_list_ != &::google::protobuf::internal::kEmptyString) {
    delete character_list_;
  }
  if (character_list) {
    set_has_character_list();
    character_list_ = character_list;
  } else {
    clear_has_character_list();
    character_list_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// PacketHeader_LoginPacket

// required string username = 2;
inline bool PacketHeader_LoginPacket::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PacketHeader_LoginPacket::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PacketHeader_LoginPacket::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PacketHeader_LoginPacket::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& PacketHeader_LoginPacket::username() const {
  return *username_;
}
inline void PacketHeader_LoginPacket::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void PacketHeader_LoginPacket::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void PacketHeader_LoginPacket::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PacketHeader_LoginPacket::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* PacketHeader_LoginPacket::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PacketHeader_LoginPacket::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string password = 3;
inline bool PacketHeader_LoginPacket::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PacketHeader_LoginPacket::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PacketHeader_LoginPacket::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PacketHeader_LoginPacket::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& PacketHeader_LoginPacket::password() const {
  return *password_;
}
inline void PacketHeader_LoginPacket::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void PacketHeader_LoginPacket::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void PacketHeader_LoginPacket::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PacketHeader_LoginPacket::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* PacketHeader_LoginPacket::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PacketHeader_LoginPacket::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 version = 4;
inline bool PacketHeader_LoginPacket::has_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PacketHeader_LoginPacket::set_has_version() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PacketHeader_LoginPacket::clear_has_version() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PacketHeader_LoginPacket::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::google::protobuf::int32 PacketHeader_LoginPacket::version() const {
  return version_;
}
inline void PacketHeader_LoginPacket::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
}

// -------------------------------------------------------------------

// PacketHeader

// optional .Packet.PacketHeader.LoginPacket login_packet = 1;
inline bool PacketHeader::has_login_packet() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PacketHeader::set_has_login_packet() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PacketHeader::clear_has_login_packet() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PacketHeader::clear_login_packet() {
  if (login_packet_ != NULL) login_packet_->::Packet::PacketHeader_LoginPacket::Clear();
  clear_has_login_packet();
}
inline const ::Packet::PacketHeader_LoginPacket& PacketHeader::login_packet() const {
  return login_packet_ != NULL ? *login_packet_ : *default_instance_->login_packet_;
}
inline ::Packet::PacketHeader_LoginPacket* PacketHeader::mutable_login_packet() {
  set_has_login_packet();
  if (login_packet_ == NULL) login_packet_ = new ::Packet::PacketHeader_LoginPacket;
  return login_packet_;
}
inline ::Packet::PacketHeader_LoginPacket* PacketHeader::release_login_packet() {
  clear_has_login_packet();
  ::Packet::PacketHeader_LoginPacket* temp = login_packet_;
  login_packet_ = NULL;
  return temp;
}
inline void PacketHeader::set_allocated_login_packet(::Packet::PacketHeader_LoginPacket* login_packet) {
  delete login_packet_;
  login_packet_ = login_packet;
  if (login_packet) {
    set_has_login_packet();
  } else {
    clear_has_login_packet();
  }
}

// optional .Packet.PacketHeader.ConnectedPacket connected_packet = 2;
inline bool PacketHeader::has_connected_packet() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PacketHeader::set_has_connected_packet() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PacketHeader::clear_has_connected_packet() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PacketHeader::clear_connected_packet() {
  if (connected_packet_ != NULL) connected_packet_->::Packet::PacketHeader_ConnectedPacket::Clear();
  clear_has_connected_packet();
}
inline const ::Packet::PacketHeader_ConnectedPacket& PacketHeader::connected_packet() const {
  return connected_packet_ != NULL ? *connected_packet_ : *default_instance_->connected_packet_;
}
inline ::Packet::PacketHeader_ConnectedPacket* PacketHeader::mutable_connected_packet() {
  set_has_connected_packet();
  if (connected_packet_ == NULL) connected_packet_ = new ::Packet::PacketHeader_ConnectedPacket;
  return connected_packet_;
}
inline ::Packet::PacketHeader_ConnectedPacket* PacketHeader::release_connected_packet() {
  clear_has_connected_packet();
  ::Packet::PacketHeader_ConnectedPacket* temp = connected_packet_;
  connected_packet_ = NULL;
  return temp;
}
inline void PacketHeader::set_allocated_connected_packet(::Packet::PacketHeader_ConnectedPacket* connected_packet) {
  delete connected_packet_;
  connected_packet_ = connected_packet;
  if (connected_packet) {
    set_has_connected_packet();
  } else {
    clear_has_connected_packet();
  }
}

// optional string auth_code = 3;
inline bool PacketHeader::has_auth_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PacketHeader::set_has_auth_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PacketHeader::clear_has_auth_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PacketHeader::clear_auth_code() {
  if (auth_code_ != &::google::protobuf::internal::kEmptyString) {
    auth_code_->clear();
  }
  clear_has_auth_code();
}
inline const ::std::string& PacketHeader::auth_code() const {
  return *auth_code_;
}
inline void PacketHeader::set_auth_code(const ::std::string& value) {
  set_has_auth_code();
  if (auth_code_ == &::google::protobuf::internal::kEmptyString) {
    auth_code_ = new ::std::string;
  }
  auth_code_->assign(value);
}
inline void PacketHeader::set_auth_code(const char* value) {
  set_has_auth_code();
  if (auth_code_ == &::google::protobuf::internal::kEmptyString) {
    auth_code_ = new ::std::string;
  }
  auth_code_->assign(value);
}
inline void PacketHeader::set_auth_code(const char* value, size_t size) {
  set_has_auth_code();
  if (auth_code_ == &::google::protobuf::internal::kEmptyString) {
    auth_code_ = new ::std::string;
  }
  auth_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PacketHeader::mutable_auth_code() {
  set_has_auth_code();
  if (auth_code_ == &::google::protobuf::internal::kEmptyString) {
    auth_code_ = new ::std::string;
  }
  return auth_code_;
}
inline ::std::string* PacketHeader::release_auth_code() {
  clear_has_auth_code();
  if (auth_code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = auth_code_;
    auth_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PacketHeader::set_allocated_auth_code(::std::string* auth_code) {
  if (auth_code_ != &::google::protobuf::internal::kEmptyString) {
    delete auth_code_;
  }
  if (auth_code) {
    set_has_auth_code();
    auth_code_ = auth_code;
  } else {
    clear_has_auth_code();
    auth_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Packet

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_packet_2eproto__INCLUDED
